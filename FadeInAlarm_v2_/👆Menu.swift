
import SwiftUI


struct ğŸ‘†VolumeOnWaiting: View {
    @EnvironmentObject var ğŸ“±: ğŸ“±Model
    
    var body: some View {
        Menu( ğŸ“±.ğŸ”ŠVolumeOnWaiting.description + " %" ) {
            Picker("Volume on waiting", selection: $ğŸ“±.ğŸ”ŠVolumeOnWaiting) {
                Text("0 %").tag(0)
                Text("1 %").tag(1)
                Text("3 %").tag(3)
                Text("5 %").tag(5)
                Text("10 %").tag(10)
            }
        }
        .font(.caption.bold())
        .frame(width: 54, height: 24, alignment: .trailing)
        .padding(.trailing, 4)
        .lineLimit(1)
        .minimumScaleFactor(0.1)
        .disabled( ğŸ“±.ğŸ”› != .PowerOff )
        .accessibilityLabel("Select volume on waiting")
    }
}




struct ğŸ‘†TimeFadeIn: View {
    @EnvironmentObject var ğŸ“±: ğŸ“±Model
    
    var body: some View {
        DatePicker("Time fade-In", selection: $ğŸ“±.ğŸ•°TimeFadeIn, displayedComponents: .hourAndMinute)
            .labelsHidden()
            .onAppear {
                if let ğŸ“¦ = UserDefaults.standard.value(forKey: "TimeFadeIn") {
                    ğŸ“±.ğŸ•°TimeFadeIn = ğŸ“¦ as! Date
                } else {
                    ğŸ“±.ğŸ•°TimeFadeIn = Date.now + 180
                }
            }
            .onChange(of: ğŸ“±.ğŸ•°TimeFadeIn) { ğŸ…ƒime in
                UserDefaults.standard.setValue(ğŸ…ƒime, forKey: "TimeFadeIn")
            }
            .disabled( ğŸ“±.ğŸ”› != .PowerOff )
            .accessibilityLabel("Set time to start fade-in")
    }
}




struct ğŸ‘†HourFadeIn: View {
    
    enum ğŸ„²hoices: Double, CaseIterable, Identifiable {
        case second10 =  10.0
        case second30 = 30.0
        case minute01 = 60.0
        case minute05 = 300.0
        case minute30 = 1800.0
        case hour01 = 3600.0
        
        var id: Double { self.rawValue }
        
        var â“£ext: String {
            switch self {
            case .second10: return "0:10"
            case .second30: return "0:30"
            case .minute01: return "1:00"
            case .minute05: return "5:00"
            case .minute30: return "30:00"
            case .hour01:  return "1:00:00"
            }
        }
    }
    
    @EnvironmentObject var ğŸ“±: ğŸ“±Model
    
    var body: some View {
        Menu( "+ " + (ğŸ„²hoices(rawValue: ğŸ“±.ğŸ•›HourFadein)?.â“£ext ?? "ğŸ‘¿") ) {
            Picker("Hour fade-in", selection: $ğŸ“±.ğŸ•›HourFadein) {
                ForEach(ğŸ„²hoices.allCases) { ğŸ„²hoice in
                    Text(ğŸ„²hoice.â“£ext)
                }
            }
        }
        .font(.body.weight(.heavy))
        .accessibilityLabel("Select hour fade-in")
        .disabled( ğŸ“±.ğŸ”› != .PowerOff )
        .foregroundColor(ğŸ“±.ğŸ”› != .PowerOff ? .secondary : nil)
    }
}




struct ğŸ‘†HourFadeOut: View {
    
    enum ğŸ„²hoices: Double, CaseIterable, Identifiable {
        case second3 =  3.0
        case second7 =  7.0
        case second15 = 15.0
        case second30 =  30.0
        case minute01 = 60.0
        
        var id: Double { self.rawValue }
        
        var â“£ext: String {
            switch self {
            case .second3: return "0:03"
            case .second7: return "0:07"
            case .second15: return "0:15"
            case .second30: return "0:30"
            case .minute01: return "1:00"
            }
        }
    }
    
    @EnvironmentObject var ğŸ“±: ğŸ“±Model
    
    var body: some View {
        Menu( "+ " + (ğŸ„²hoices(rawValue: ğŸ“±.ğŸ•›HourFadeOut)?.â“£ext ?? "ğŸ‘¿") ) {
            Picker("Hour fade-out", selection: ğŸ“±.$ğŸ•›HourFadeOut) {
                ForEach(ğŸ„²hoices.allCases) { ğŸ„²hoice in
                    Text(ğŸ„²hoice.â“£ext)
                }
            }
        }
        .font(.caption.bold())
        .disabled( ğŸ“±.ğŸ”› != .PowerOff )
        .accessibilityLabel("Select hour fade-out")
    }
}




struct ğŸ‘†Menu_Previews: PreviewProvider {
    static let ğŸ“± = ğŸ“±Model()

    static var previews: some View {
        VStack {
            ğŸ‘†VolumeOnWaiting()
            ğŸ‘†TimeFadeIn()
            ğŸ‘†HourFadeIn()
            ğŸ‘†HourFadeIn()
            ğŸ‘†HourFadeOut()
        }
        .environmentObject(ğŸ“±)
        .previewLayout(.fixed(width: 300, height: 600))
        
        VStack {
            ğŸ‘†VolumeOnWaiting()
            ğŸ‘†TimeFadeIn()
            ğŸ‘†HourFadeIn()
            ğŸ‘†HourFadeIn()
            ğŸ‘†HourFadeOut()
        }
        .environmentObject(ğŸ“±)
        .previewLayout(.fixed(width: 300, height: 600))
        .preferredColorScheme(.dark)
    }
}
