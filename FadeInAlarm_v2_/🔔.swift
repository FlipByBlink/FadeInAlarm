
import SwiftUI


struct ðŸ””: View {
    
    var â“Ÿhase: ðŸ”›Phase
    
    var â“˜sSlash: Bool = false
    
    @State private var ðŸ…‚cale = 0.3
    
    @State private var ðŸ„¾pacity = 1.0
    
    
    let ðŸ”‰ = 0.4
    
    
    var body: some View {
        
        Group {
            switch â“Ÿhase {
            case .waiting:
                Image(systemName: "bell")
                    .symbolVariant(â“˜sSlash ? .slash : .none)
                    .scaleEffect(ðŸ”‰)
                
            case .fadeIn:
                Image(systemName: "bell")
                    .scaleEffect(ðŸ…‚cale)
                    .opacity(ðŸ„¾pacity)
                    .task {
                        let ðŸ•’ = 5.0
                        Timer.scheduledTimer(withTimeInterval: ðŸ•’, repeats: true) { _ in
                            ðŸ…‚cale = ðŸ”‰
                            withAnimation(.linear(duration: 0.2)) {
                                ðŸ„¾pacity = 1.0
                            }
                            withAnimation(.linear(duration: ðŸ•’)) {
                                ðŸ…‚cale = 1.0
                            }
                            withAnimation(.linear(duration: 0.2).delay( ðŸ•’ - 0.2 )) {
                                ðŸ„¾pacity = 0.0
                            }
                        }
                    }
                
            case .maxVolume:
                Image(systemName: "bell")
                
            case .fadeOut:
                Image(systemName: "bell")
                    .scaleEffect(ðŸ…‚cale)
                    .opacity(ðŸ„¾pacity)
                    .task {
                        let ðŸ•’ = 5.0
                        Timer.scheduledTimer(withTimeInterval: ðŸ•’, repeats: true) { _ in
                            ðŸ…‚cale = 1.0
                            withAnimation(.linear(duration: 0.2)) {
                                ðŸ„¾pacity = 1.0
                            }
                            withAnimation(.linear(duration: ðŸ•’)) {
                                ðŸ…‚cale = ðŸ”‰
                            }
                            withAnimation(.linear(duration: 0.2).delay( ðŸ•’ - 0.2 )) {
                                ðŸ„¾pacity = 0.0
                            }
                        }
                    }
                
            case .powerOff: Text("ðŸ‘¿")
            }
        }
        .symbolVariant(.fill)
        .font(.title)
        .foregroundColor(.secondary)
    }
}




struct ðŸ””View_Previews: PreviewProvider {
    static var previews: some View {
        VStack {
            ðŸ””(â“Ÿhase: .waiting, â“˜sSlash: true)
            ðŸ””(â“Ÿhase: .waiting)
            ðŸ””(â“Ÿhase: .fadeIn)
            ðŸ””(â“Ÿhase: .maxVolume)
            ðŸ””(â“Ÿhase: .fadeOut)
        }
    }
}
