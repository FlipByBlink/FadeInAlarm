
import SwiftUI


struct ðŸ”˜Button: View {
    
    enum ðŸ…ƒype: String {
        case Start = "power.circle.fill"
        case Stop = "checkmark.circle.fill"
    }
    
    var â“£ype: ðŸ…ƒype
    
    var ðŸ”›: ðŸ”›Phase
    
    var ðŸ„°ction: () -> Void
    
    var ðŸŽ¨: Color {
        if ðŸ”› == .FadeOut { return .gray }
        
        switch â“£ype {
        case .Start:
            return .accentColor
        case .Stop:
            return .red
        }
    }
    
    var body: some View {
        Button {
            ðŸ„°ction()
        } label: {
            Image(systemName: â“£ype.rawValue)
                .font(.system(size: 96))
                .symbolRenderingMode(.palette)
                .foregroundStyle(Color(.systemBackground), ðŸŽ¨)
                .shadow(radius: 4,
                        x: 1, y: 1.5)
        }
        .padding()
        .disabled(ðŸ”› == .FadeOut)
        .opacity(ðŸ”› == .FadeOut ? 0.6 : 1.0)
    }
    
    init(_ type: ðŸ…ƒype,_ now: ðŸ”›Phase = .Waiting, _ action: @escaping () -> Void) {
        â“£ype = type
        ðŸ”› = now
        ðŸ„°ction = action
    }
}




struct ðŸ”˜Button_Previews: PreviewProvider {
    static var previews: some View {
        VStack {
            ðŸ”˜Button(.Start, .PowerOff){ }
            
            ðŸ”˜Button(.Stop, .MaxVolume){ }
            
            ðŸ”˜Button(.Stop, .FadeOut){ }
        }
        .previewLayout(.fixed(width: 300, height: 500))
        
        VStack {
            ðŸ”˜Button(.Start, .PowerOff){ }
            
            ðŸ”˜Button(.Stop, .MaxVolume){ }
            
            ðŸ”˜Button(.Stop, .FadeOut){ }
        }
        .previewLayout(.fixed(width: 300, height: 500))
        .preferredColorScheme(.dark)
    }
}
