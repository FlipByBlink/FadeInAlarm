import SwiftUI
import MediaPlayer

class ðŸ“±AppModel: ObservableObject {
    let ðŸ“»player = ðŸ“»AlarmPlayer()
    
    @AppStorage("VolumeOnWaiting") var ðŸ”ŠvolumeOnWaiting: Int = 3
    @Published var ðŸ•°timeFadeIn: Date = Calendar.current.startOfDay(for: .now)
    @AppStorage("HourFadein") var ðŸ•›hourFadein: Double = 10.0
    @AppStorage("HourFadeOut") var ðŸ•›hourFadeOut: Double = 3.0
    
    @Published var ðŸ”›phase: ðŸ”›Phase = .powerOff
    @Published var ðŸ””localVolume: Int = 0
}

extension ðŸ“±AppModel {
    func startAlarm() {
        UINotificationFeedbackGenerator().notificationOccurred(.success)
        self.ðŸ”›phase = .waiting
        self.ðŸ“»player.play(self.ðŸ•°timeFadeIn, self.ðŸ•›hourFadein)
        Timer.scheduledTimer(withTimeInterval: 0.5, repeats: true) { â“£imer in
            switch self.ðŸ”›phase {
                case .waiting:
                    self.ðŸ“»player.volume = Float(self.ðŸ”ŠvolumeOnWaiting) / 100
                    let â“—ourAndMinute = Calendar.current.dateComponents([.hour, .minute], from: .now)
                    if Calendar.current.date(self.ðŸ•°timeFadeIn, matchesComponents: â“—ourAndMinute) {
                        self.ðŸ”›phase = .fadeIn
                        ðŸ””Notification.add(title: "Begin fade in alarm")
                    }
                case .fadeIn:
                    self.ðŸ“»player.volume += Float(0.5 / self.ðŸ•›hourFadein)
                    if self.ðŸ“»player.volume > 1.0 {
                        self.ðŸ“»player.volume = 1.0
                        self.ðŸ”›phase = .maxVolume
                        ðŸ””Notification.add(title: "Alarm is max volume")
                    }
                case .maxVolume:
                    break
                case .fadeOut:
                    self.ðŸ“»player.volume -= Float(0.5 / self.ðŸ•›hourFadeOut)
                    if self.ðŸ“»player.volume < 0.0 {
                        self.ðŸ“»player.volume = 0.0
                        self.ðŸ”›phase = .powerOff
                    }
                case .powerOff:
                    self.ðŸ“»player.stop()
                    MPRemoteCommandCenter.shared().stopCommand.removeTarget(nil)
                    â“£imer.invalidate()
            }
            self.ðŸ””localVolume = Int(self.ðŸ“»player.volume * 100)
        }
        MPRemoteCommandCenter.shared().stopCommand.addTarget { _ in
            self.stopAlarm()
            return .success
        }
        ðŸ””Notification.setBackUp(self.ðŸ•°timeFadeIn.addingTimeInterval(self.ðŸ•›hourFadein))
    }
    func stopAlarm() {
        switch self.ðŸ”›phase {
            case .waiting: self.ðŸ”›phase = .powerOff
            case .fadeIn, .maxVolume: self.ðŸ”›phase = .fadeOut
            default: break
        }
        UINotificationFeedbackGenerator().notificationOccurred(.warning)
        ðŸ””Notification.removeAllDeliveredNotifications()
        ðŸ””Notification.removeAllPendingNotificationRequests()
    }
}
